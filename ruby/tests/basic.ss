#lang scheme

(require "../parser.ss")

(define (test str objs)
  (when (not (equal? (lex str) objs))
    (printf "Expected ~a got ~a\n" objs (lex str))))

(test "x = 1" (list (token-varname "x") '= (token-number "1")))
(test "y = x" (list (token-varname "y") '= (token-varname "x")))
(test "$x = t" (list (token-global "x") '= (token-varname "t")))
(test "x = $a" (list (token-varname "x") '= (token-global "a")))
(test "x = a + a" (list (token-varname "x") '= (token-varname "a") '+ (token-varname "a")))
(test "x = a - a" (list (token-varname "x") '= (token-varname "a") '- (token-varname "a")))
(test "x = a * a" (list (token-varname "x") '= (token-varname "a") '* (token-varname "a")))
(test "x = a / a" (list (token-varname "x") '= (token-varname "a") '/ (token-varname "a")))
(test "x = a % a" (list (token-varname "x") '= (token-varname "a") '% (token-varname "a")))
(test "x = a & a" (list (token-varname "x") '= (token-varname "a") '& (token-varname "a")))
(test "x = a ^ a" (list (token-varname "x") '= (token-varname "a") '^ (token-varname "a")))
(test "x = a || a" (list (token-varname "x") '= (token-varname "a") '\|\| (token-varname "a")))
(test "x = a && a" (list (token-varname "x") '= (token-varname "a") '&& (token-varname "a")))
(test "x = a < a" (list (token-varname "x") '= (token-varname "a") '< (token-varname "a")))
(test "x = a > a" (list (token-varname "x") '= (token-varname "a") '> (token-varname "a")))
(test "x = a <= a" (list (token-varname "x") '= (token-varname "a") '<= (token-varname "a")))
(test "x = a >= a" (list (token-varname "x") '= (token-varname "a") '>= (token-varname "a")))
(test "x = a == a" (list (token-varname "x") '= (token-varname "a") '== (token-varname "a")))
(test "x = a === a" (list (token-varname "x") '= (token-varname "a") '=== (token-varname "a")))
(test "x = a != a" (list (token-varname "x") '= (token-varname "a") '!= (token-varname "a")))
(test "x = a << a" (list (token-varname "x") '= (token-varname "a") '<< (token-varname "a")))
(test "x = a >> a" (list (token-varname "x") '= (token-varname "a") '>> (token-varname "a")))
(test "x **= a" (list (token-varname "x") (token-op-assign '**=) (token-varname "a")))
(test "x *= a" (list (token-varname "x") (token-op-assign '*=) (token-varname "a")))
(test "x &= a" (list (token-varname "x") (token-op-assign '&=) (token-varname "a")))
(test "x |= a" (list (token-varname "x") (token-op-assign '\|=) (token-varname "a")))
(test "x ||= a" (list (token-varname "x") (token-op-assign '\|\|=) (token-varname "a")))
(test "x /= a" (list (token-varname "x") (token-op-assign '/=) (token-varname "a")))
(test "x %= a" (list (token-varname "x") (token-op-assign '%=) (token-varname "a")))
(test "x &&= a" (list (token-varname "x") (token-op-assign '&&=) (token-varname "a")))
(test "x >>= a" (list (token-varname "x") (token-op-assign '>>=) (token-varname "a")))
(test "x <<= a" (list (token-varname "x") (token-op-assign '<<=) (token-varname "a")))

(printf "~a\n" (lex "\"hello #{stuff} world\""))
(printf "~a\n" (lex "\"global var #$g1 instance var #@i1 class var #@@c1\""))
(printf "~a\n" (lex "\"hello #{\"another string\"} ok\""))

(define (test-parse string)
  (printf "'~a' = ~a\n" string (parse (open-input-string string))))

;; (test-parse "y;y;")
(test-parse "")
(test-parse "x = y if true")
(test-parse "y = 2 if y == 1")
(test-parse "y = y")
(test-parse "y")
(test-parse "a < b")
(test-parse "y if x < q")
(test-parse "y;y")
(test-parse "y if y;")
(test-parse "y unless y;")
(test-parse "y while y;")
(test-parse "y until y;")
(test-parse "y until y; x if x;")
;; (test-parse "y rescue y")

(test-parse "
def foo
	y = 2;
end
")
